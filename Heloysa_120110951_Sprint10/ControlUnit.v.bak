//ControlUnit: Decodifica a instrução e gera os sinais de controle.

module ControlUnit (
    //Entradas
    input [6:0] Op,          // Opcode (bits 6:0)
    input [2:0] Funct3,      // Funct3 (bits 14:12)
    input [6:0] Funct7,      // Funct7 (bits 31:25)
    
	 // Saídas
	 output reg RegWrite,     // Sinal de escrita no registrador
    output reg ULASrc,       // Sinal para o MUX que seleciona o segundo operando da ULA
    output reg [2:0] ULAControl,    // Sinal de controle da ULA
	 output reg ImmSrc,
	 output reg MemWrite,
	 output reg ResultSrc,
	 output reg Branch
);

	reg [16:0] IN_unControl;
	 
	always @(*) begin
	
	IN_unControl = {Op, Funct3, Funct7};

		casex (IN_unControl)
			
			// ADD
			17'b01100110000000000: begin
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b000; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
		
			// SUB
			17'b01100110000100000: begin 
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b001; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
		
			// AND
			17'b01100111110000000: begin
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b010; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
		
			// OR
			17'b01100111100000000: begin
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b011; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
			
			// XOR
			17'b01100111000000000: begin
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b100; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
		
			// SLT
			17'b01100110100000000: begin
			RegWrite = 1'b1; ImmSrc = 1'bx; ULASrc = 1'b0;
			ULAControl = 3'b101; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
		
			// ADDI
			17'b0010011000xxxxxxx: begin
			RegWrite = 1'b1; ImmSrc = 1'b0; ULASrc = 1'b1;
			ULAControl = 3'b000; MemWrite = 1'b0; ResultSrc = 1'b0;
			Branch = 1'b0;
			end
			
			// LB
			17'b0000011000xxxxxxx: begin
			RegWrite = 1'b1; ImmSrc = 1'b0; ULASrc = 1'b1;
			ULAControl = 3'b000; MemWrite = 1'b0; ResultSrc = 1'b1;
			Branch = 1'b0;
			end
			
			// SB
			17'b0100011000xxxxxxx: begin
			RegWrite = 1'b0; ImmSrc = 1'b1; ULASrc = 1'b1;
			ULAControl = 3'b000; MemWrite = 1'b1; ResultSrc = 1'bx;
			Branch = 1'b0;
			end
			
			//BEQ
			17'b1100011000xxxxxxx: begin
			RegWrite = 1'b0; ImmSrc = 1'b10; ULASrc = 1'b0;
			ULAControl = 3'b001; MemWrite = 1'b0; ResultSrc = 1'bx;
			Branch = 1'b1;
			
			default: begin
			RegWrite = 1'b0; ImmSrc = 1'b0; ULASrc = 1'b0;
			ULAControl = 3'b000; MemWrite = 1'b0; ResultSrc = 1'b0;
			end
		
		endcase
	end

endmodule
